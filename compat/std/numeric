#ifndef IGRIS_STD_NUMERIC_H
#define IGRIS_STD_NUMERIC_H

#include <igris/util/types_extension.h>
#include <cfloat>

namespace std
{
	template <class T> struct numeric_limits;

	template<> struct numeric_limits<bool>;
	template<> struct numeric_limits<char>;
	template<> struct numeric_limits<signed char>;
	template<> struct numeric_limits<unsigned char>;
	template<> struct numeric_limits<wchar_t>;
	template<> struct numeric_limits<short>;
	template<> struct numeric_limits<unsigned short>;
	template<> struct numeric_limits<int>;
	template<> struct numeric_limits<unsigned int>;
	template<> struct numeric_limits<long>;
	template<> struct numeric_limits<unsigned long>;
	template<> struct numeric_limits<long long>;
	template<> struct numeric_limits<unsigned long long>;
	template<> struct numeric_limits<float>;
	
	template<> struct numeric_limits<double> 
	{
		constexpr static double epsilon() { return DBL_EPSILON; } 
	};
	
	template<> struct numeric_limits<long double>;
}

#endif